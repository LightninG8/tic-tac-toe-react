{"version":3,"sources":["index.js"],"names":["Square","props","className","isWinnerSquare","onClick","value","Board","squaresList","this","squares","row","j","i","push","winnerSquares","renderSquares","React","Component","Game","state","history","Array","fill","historyIsReversed","stepNumber","selectElem","xIsNext","slice","current","length","setState","calculateWinner","winner","concat","coords","step","moves","map","move","x","y","desc","isActive","jumpTo","reverse","status","includes","handleClick","reverseMoves","restart","lines","a","b","c","ReactDOM","render","document","getElementById"],"mappings":"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","file":"static/js/main.539e2d0f.chunk.js","sourcesContent":["import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport './index.css';\r\n\r\nfunction Square(props) {\r\n    return (\r\n    <button className={props.isWinnerSquare()}  onClick={props.onClick}>\r\n        {props.value}\r\n    </button>\r\n    );\r\n}\r\n  \r\nclass Board extends React.Component {\r\n    renderSquares() {\r\n        const squaresList = this.props.squares;\r\n\r\n        let squares = [];\r\n        let row = [];\r\n\r\n        for (let j = 0; j < 3; j++) {\r\n            for (let i = 0; i < 3; i++) {\r\n                row.push(\r\n                    <Square \r\n                        key={3 * j + i}\r\n                        value={squaresList[3 * j + i]}\r\n                        onClick={() => this.props.onClick(3 * j + i)}\r\n                        isWinnerSquare={() => {\r\n                            if (this.props.winnerSquares != null) {\r\n                                if (this.props.winnerSquares[i] === 3 * j + i) {\r\n                                    return \"square isWinnerSquare\"\r\n                                } \r\n                            }\r\n                            return \"square\"\r\n                        }}\r\n                    />\r\n                )\r\n            }     \r\n            squares.push(\r\n                <div className=\"board-row\" key={j}>\r\n                    {row}\r\n                </div>\r\n            )  \r\n            row = [];\r\n        }\r\n\r\n        return squares;\r\n    }\r\n    render() {\r\n        return (\r\n        <div>\r\n            {this.renderSquares()}\r\n        </div>\r\n        );\r\n    }\r\n}\r\n\r\nclass Game extends React.Component {\r\n    handleClick(i) {\r\n        const history = this.state.history.slice(0, this.state.stepNumber + 1);\r\n        const current = history[history.length - 1];\r\n        const squares = current.squares.slice(0);\r\n\r\n        if (squares[i]) {\r\n            this.setState({\r\n                selectElem: i\r\n            })    \r\n        } else {\r\n            this.setState({\r\n                selectElem: null\r\n            }) \r\n        }\r\n        \r\n\r\n        if ( calculateWinner(current.squares).winner || squares[i] ) {\r\n            return;\r\n        }\r\n        squares[i] = this.state.xIsNext ? \"X\" : \"O\";\r\n\r\n        \r\n        this.setState({\r\n            history: history.concat([{\r\n                squares: squares,\r\n                coords: i\r\n            }]),\r\n            stepNumber: history.length,\r\n            xIsNext: !this.state.xIsNext,\r\n        });\r\n\r\n        \r\n    }\r\n    reverseMoves() {\r\n        this.setState({\r\n            historyIsReversed: !this.state.historyIsReversed,\r\n        })\r\n    }\r\n    restart() {\r\n        this.setState({\r\n            history: [{\r\n                squares: Array(9).fill(null),\r\n            }],\r\n            historyIsReversed: false,\r\n            stepNumber: 0,\r\n            selectElem: null,\r\n            xIsNext: true,\r\n        })\r\n    }\r\n    jumpTo(step) {\r\n        this.setState({\r\n            stepNumber: step,\r\n            xIsNext: (step % 2) === 0,\r\n            selectElem: null,\r\n        })\r\n    }\r\n    constructor(props) {\r\n        super(props);\r\n\r\n        this.state = {\r\n            history: [{\r\n                squares: Array(9).fill(null),\r\n            }],\r\n            historyIsReversed: false,\r\n            stepNumber: 0,\r\n            selectElem: null,\r\n            xIsNext: true,\r\n        }\r\n    }\r\n    render() {\r\n        const history = this.state.history;\r\n        const current = history[this.state.stepNumber];\r\n        const winner = calculateWinner(current.squares).winner;\r\n\r\n        const moves = history.map((step, move) => {\r\n            const x = step.coords % 3 + 1;\r\n            const y = (step.coords - (step.coords % 3)) / 3 + 1;\r\n\r\n            const desc = move ? \r\n                `Перейти к ходу #${move} (${x}, ${y})` :\r\n                `К началу игры`;\r\n\r\n            let isActive = step.coords === this.state.selectElem ? \"isActive\" : null;\r\n\r\n            return (\r\n                <li key={move} >\r\n                    <button className={isActive} onClick={() => this.jumpTo(move)}>{desc}</button>\r\n                </li>\r\n            )\r\n        });\r\n\r\n        if (this.state.historyIsReversed) {\r\n            moves.reverse();\r\n        }\r\n\r\n        const status = winner ? `Выиграл: ${winner}` : current.squares.includes(null) ? (`Следующий ход: ${this.state.xIsNext ? \"X\" : \"O\"}`) : \"Ничья\";\r\n\r\n        return (\r\n        <div className=\"game\">\r\n            <div className=\"game-board\">\r\n            <Board \r\n                squares={current.squares}\r\n                onClick={(i) => this.handleClick(i)}\r\n                winnerSquares={calculateWinner(current.squares).winnerSquares}\r\n            />\r\n            </div>\r\n            <div className=\"game-info\">\r\n            <div>{status}</div>\r\n            <ol>{moves}</ol>\r\n            <div>\r\n                <button onClick={() => this.reverseMoves()}>Сортировать</button>\r\n                &nbsp;\r\n                <button onClick={() => this.restart()}>Заново</button>\r\n            </div>\r\n            </div>\r\n        </div>\r\n        );\r\n    }\r\n}\r\n\r\n\r\n// ========================================\r\n\r\nReactDOM.render(\r\n<Game />,\r\ndocument.getElementById('root')\r\n);\r\n\r\n\r\nfunction calculateWinner(squares) {\r\n  const lines = [\r\n    [0, 1, 2],\r\n    [3, 4, 5],\r\n    [6, 7, 8],\r\n    [0, 3, 6],\r\n    [1, 4, 7],\r\n    [2, 5, 8],\r\n    [0, 4, 8],\r\n    [2, 4, 6],\r\n  ];\r\n  for (let i = 0; i < lines.length; i++) {\r\n    const [a, b, c] = lines[i];\r\n    if (squares[a] && squares[a] === squares[b] && squares[a] === squares[c]) {\r\n\r\n        return {\r\n            winner: squares[a],\r\n            winnerSquares: lines[i],\r\n        };\r\n    }\r\n  }\r\n  return {\r\n    winner: null,\r\n    winnerSquares: null,\r\n};\r\n}"],"sourceRoot":""}